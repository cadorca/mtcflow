package com.mtcflow.model.mtc.cimpl;

import java.util.Map;

import org.apache.commons.lang3.text.StrSubstitutor;

import com.mtcflow.model.mtc.MTC;

public class [%=clazz.name%]CImpl  extends com.mtcflow.model.mtc.impl.[%=clazz.name%]Impl {
	
	private final static StrSubstitutor strSubstitutor = new StrSubstitutor();
	
	[%for (attr in clazz.eAllAttributes) { %]
	[% if (attr.eType.name='EString' and attr.upperBound<2 and attr.upperBound<>-1) {%]
	@Override
	public String get[%=attr.name.firstToUpper()%]() {
	    [%if (clazz.name=='MTC') {%]
	    MTC mtc = this;
	    [%} else {%]
	    [%if (clazz.name=='Variable' or clazz.name=='Tag' or clazz.name=='Script' or clazz.name=='ModelEnvironment' or clazz.name=='Library') {%]
		MTC mtc = (MTC) eContainer().eContainer();
		[%} else {%]
		MTC mtc = (MTC) eContainer();
		[% }} %]
		if(mtc!=null && mtc.getExecutionInformation() !=null && mtc.getExecutionInformation().get("variables")!=null ){
		Map variables = (Map) mtc.getExecutionInformation().get("variables");
		return strSubstitutor.replace(super.get[%=attr.name.firstToUpper()%](), variables);
		}
		else
		return super.get[%=attr.name.firstToUpper()%]();
	}
 	[%}}%]	
}


[%
 function String firstToUpper() : String{
	return (self.charAt(0)+'').toUpperCase()+self.substring(1,self.length);
}  
%]