/**
 */
package com.mtcflow.model.mtc.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.mtcflow.model.mtc.util.MtcAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MtcItemProviderAdapterFactory extends MtcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MtcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.MTC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MTCItemProvider mtcItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.MTC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMTCAdapter() {
		if (mtcItemProvider == null) {
			mtcItemProvider = new MTCItemProvider(this);
		}

		return mtcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Metamodel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetamodelItemProvider metamodelItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Metamodel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetamodelAdapter() {
		if (metamodelItemProvider == null) {
			metamodelItemProvider = new MetamodelItemProvider(this);
		}

		return metamodelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.ReferencedResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferencedResourceItemProvider referencedResourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.ReferencedResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferencedResourceAdapter() {
		if (referencedResourceItemProvider == null) {
			referencedResourceItemProvider = new ReferencedResourceItemProvider(this);
		}

		return referencedResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.File} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileItemProvider fileItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.File}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileAdapter() {
		if (fileItemProvider == null) {
			fileItemProvider = new FileItemProvider(this);
		}

		return fileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Validation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidationItemProvider validationItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Validation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidationAdapter() {
		if (validationItemProvider == null) {
			validationItemProvider = new ValidationItemProvider(this);
		}

		return validationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.HOTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HOTransformationItemProvider hoTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.HOTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHOTransformationAdapter() {
		if (hoTransformationItemProvider == null) {
			hoTransformationItemProvider = new HOTransformationItemProvider(this);
		}

		return hoTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.M2MTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected M2MTransformationItemProvider m2MTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.M2MTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createM2MTransformationAdapter() {
		if (m2MTransformationItemProvider == null) {
			m2MTransformationItemProvider = new M2MTransformationItemProvider(this);
		}

		return m2MTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.M2TTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected M2TTransformationItemProvider m2TTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.M2TTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createM2TTransformationAdapter() {
		if (m2TTransformationItemProvider == null) {
			m2TTransformationItemProvider = new M2TTransformationItemProvider(this);
		}

		return m2TTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.MTCTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MTCTransformationItemProvider mtcTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.MTCTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMTCTransformationAdapter() {
		if (mtcTransformationItemProvider == null) {
			mtcTransformationItemProvider = new MTCTransformationItemProvider(this);
		}

		return mtcTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.T2MTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected T2MTransformationItemProvider t2MTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.T2MTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createT2MTransformationAdapter() {
		if (t2MTransformationItemProvider == null) {
			t2MTransformationItemProvider = new T2MTransformationItemProvider(this);
		}

		return t2MTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.InputModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputModelItemProvider inputModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.InputModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputModelAdapter() {
		if (inputModelItemProvider == null) {
			inputModelItemProvider = new InputModelItemProvider(this);
		}

		return inputModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.OutputModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputModelItemProvider outputModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.OutputModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputModelAdapter() {
		if (outputModelItemProvider == null) {
			outputModelItemProvider = new OutputModelItemProvider(this);
		}

		return outputModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Library} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibraryItemProvider libraryItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Library}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibraryAdapter() {
		if (libraryItemProvider == null) {
			libraryItemProvider = new LibraryItemProvider(this);
		}

		return libraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Tag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TagItemProvider tagItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Tag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTagAdapter() {
		if (tagItemProvider == null) {
			tagItemProvider = new TagItemProvider(this);
		}

		return tagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Script} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScriptItemProvider scriptItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Script}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScriptAdapter() {
		if (scriptItemProvider == null) {
			scriptItemProvider = new ScriptItemProvider(this);
		}

		return scriptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.ModelEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelEnvironmentItemProvider modelEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.ModelEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelEnvironmentAdapter() {
		if (modelEnvironmentItemProvider == null) {
			modelEnvironmentItemProvider = new ModelEnvironmentItemProvider(this);
		}

		return modelEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.ModelValidation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelValidationItemProvider modelValidationItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.ModelValidation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelValidationAdapter() {
		if (modelValidationItemProvider == null) {
			modelValidationItemProvider = new ModelValidationItemProvider(this);
		}

		return modelValidationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.OutputFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputFileItemProvider outputFileItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.OutputFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputFileAdapter() {
		if (outputFileItemProvider == null) {
			outputFileItemProvider = new OutputFileItemProvider(this);
		}

		return outputFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.InputFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputFileItemProvider inputFileItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.InputFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputFileAdapter() {
		if (inputFileItemProvider == null) {
			inputFileItemProvider = new InputFileItemProvider(this);
		}

		return inputFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Decision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionItemProvider decisionItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Decision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionAdapter() {
		if (decisionItemProvider == null) {
			decisionItemProvider = new DecisionItemProvider(this);
		}

		return decisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.Choise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiseItemProvider choiseItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.Choise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiseAdapter() {
		if (choiseItemProvider == null) {
			choiseItemProvider = new ChoiseItemProvider(this);
		}

		return choiseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.mtcflow.model.mtc.DecisionInputModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionInputModelItemProvider decisionInputModelItemProvider;

	/**
	 * This creates an adapter for a {@link com.mtcflow.model.mtc.DecisionInputModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionInputModelAdapter() {
		if (decisionInputModelItemProvider == null) {
			decisionInputModelItemProvider = new DecisionInputModelItemProvider(this);
		}

		return decisionInputModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (mtcItemProvider != null) mtcItemProvider.dispose();
		if (metamodelItemProvider != null) metamodelItemProvider.dispose();
		if (referencedResourceItemProvider != null) referencedResourceItemProvider.dispose();
		if (fileItemProvider != null) fileItemProvider.dispose();
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (validationItemProvider != null) validationItemProvider.dispose();
		if (hoTransformationItemProvider != null) hoTransformationItemProvider.dispose();
		if (m2MTransformationItemProvider != null) m2MTransformationItemProvider.dispose();
		if (m2TTransformationItemProvider != null) m2TTransformationItemProvider.dispose();
		if (mtcTransformationItemProvider != null) mtcTransformationItemProvider.dispose();
		if (t2MTransformationItemProvider != null) t2MTransformationItemProvider.dispose();
		if (inputModelItemProvider != null) inputModelItemProvider.dispose();
		if (outputModelItemProvider != null) outputModelItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (libraryItemProvider != null) libraryItemProvider.dispose();
		if (tagItemProvider != null) tagItemProvider.dispose();
		if (scriptItemProvider != null) scriptItemProvider.dispose();
		if (modelEnvironmentItemProvider != null) modelEnvironmentItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (modelValidationItemProvider != null) modelValidationItemProvider.dispose();
		if (outputFileItemProvider != null) outputFileItemProvider.dispose();
		if (inputFileItemProvider != null) inputFileItemProvider.dispose();
		if (decisionItemProvider != null) decisionItemProvider.dispose();
		if (choiseItemProvider != null) choiseItemProvider.dispose();
		if (decisionInputModelItemProvider != null) decisionInputModelItemProvider.dispose();
	}

}
